// Code generated by go-swagger; DO NOT EDIT.

// Copyright Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SRv6 Status of the host srv6
//
// +k8s:deepcopy-gen=true
//
// swagger:model SRv6
type SRv6 struct {

	// devices
	Devices []string `json:"devices"`

	// mode
	// Enum: [Disabled Enabled]
	Mode string `json:"mode,omitempty"`
}

// Validate validates this s rv6
func (m *SRv6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sRv6TypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Disabled","Enabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sRv6TypeModePropEnum = append(sRv6TypeModePropEnum, v)
	}
}

const (

	// SRv6ModeDisabled captures enum value "Disabled"
	SRv6ModeDisabled string = "Disabled"

	// SRv6ModeEnabled captures enum value "Enabled"
	SRv6ModeEnabled string = "Enabled"
)

// prop value enum
func (m *SRv6) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sRv6TypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SRv6) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SRv6) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SRv6) UnmarshalBinary(b []byte) error {
	var res SRv6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
