// Code generated by go-swagger; DO NOT EDIT.

// Copyright Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Srv6 Status of SRv6 support
//
// +k8s:deepcopy-gen=true
//
// swagger:model Srv6
type Srv6 struct {

	// s rv6 encap mode
	// Enum: [SRH Reduced]
	SRv6EncapMode string `json:"SRv6EncapMode,omitempty"`

	// devices
	Devices []string `json:"devices"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this srv6
func (m *Srv6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSRv6EncapMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var srv6TypeSRv6EncapModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SRH","Reduced"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		srv6TypeSRv6EncapModePropEnum = append(srv6TypeSRv6EncapModePropEnum, v)
	}
}

const (

	// Srv6SRv6EncapModeSRH captures enum value "SRH"
	Srv6SRv6EncapModeSRH string = "SRH"

	// Srv6SRv6EncapModeReduced captures enum value "Reduced"
	Srv6SRv6EncapModeReduced string = "Reduced"
)

// prop value enum
func (m *Srv6) validateSRv6EncapModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, srv6TypeSRv6EncapModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Srv6) validateSRv6EncapMode(formats strfmt.Registry) error {

	if swag.IsZero(m.SRv6EncapMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateSRv6EncapModeEnum("SRv6EncapMode", "body", m.SRv6EncapMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Srv6) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Srv6) UnmarshalBinary(b []byte) error {
	var res Srv6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
